{"noir_version":"0.23.0+5be9f9d7e2f39ca228df10e5a530474af0331704","hash":7723273799163049454,"abi":{"parameters":[{"name":"x","type":{"kind":"field"},"visibility":"private"},{"name":"y","type":{"kind":"field"},"visibility":"private"},{"name":"expected_hash","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"expected_hash":[{"start":2,"end":3}],"x":[{"start":0,"end":1}],"y":[{"start":1,"end":2}]},"return_type":null,"return_witnesses":[]},"bytecode":"H4sIAAAAAAAA/62QUQqAQAhErf3pOLpqq39dpaXt/ieIijbY+q0HIiMyMBMAoIeL7pih0SdbvW9VB3hy/051M44iJcVCTDNGz6YomkcjIzVdojEXE0uePaGTcKFVnVe86Bsv/AaF/7ywzd29OnqzAy1Ivt9UAQAA","debug_symbols":"bcxLCoAgFEbhvfxjB3l7kHcr0UB6gCAa6Uzu3iOoCGp44PAV+DjZ7GJI4IIKPBSkzYazUrZ7BhutsIQZrKkWhdX5BVwbUZ+zp+Za+46elRoZFfQfrcncdmve9ihyAA==","file_map":{"24":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake3)]\npub fn blake3<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n","path":"std/hash.nr"},"39":{"source":"use dep::std;\n\n// 28742\nfn main(x: Field, y: Field, expected_hash: Field) {\n    let hash = std::hash::pedersen_hash([x, y]);\n    assert_eq(hash, expected_hash);\n}\n","path":"/home/sergo/zk-hashes/Noir/pedersen/src/main.nr"}}}